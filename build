#!/usr/bin/env php
<?php
/**
 * build.php
 * @author Revin Roman
 * @license The MIT License (MIT)
 * @link https://github.com/cookyii/build
 */

if (PHP_SAPI !== 'cli') {
    echo 'Warning: Build should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;
}

foreach ([
             __DIR__ . '/../../autoload.php',
             __DIR__ . '/../autoload.php',
             __DIR__ . '/autoload.php',
             __DIR__ . '/../../vendor/autoload.php',
             __DIR__ . '/../vendor/autoload.php',
             __DIR__ . '/vendor/autoload.php',
         ] as $file) {
    if (file_exists($file)) {
        define('COOKYII_BUILD_COMPOSER_AUTOLOAD', $file);
        break;
    }
}

if (!defined('COOKYII_BUILD_COMPOSER_AUTOLOAD')) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
    die(1);
}

require_once COOKYII_BUILD_COMPOSER_AUTOLOAD;

/**
 * @param mixed $var
 * @param integer $depth
 * @param boolean $highlight
 * @param boolean $return
 * @return string|boolean
 */
function dump($var, $depth = 10, $highlight = false, $return = false)
{
    $dump = \cookyii\build\components\VarDumper::dumpAsString($var, $depth, $highlight);

    if ($return) {
        return $dump;
    } else {
        echo $dump;
    }

    return true;
}

(new \cookyii\build\applications\BuildApplication())
    ->run();